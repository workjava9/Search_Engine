name: CI/CD pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/search_engine

jobs:
  test:
    name: Java Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run tests only
        run: mvn clean test

  ci:
    name: CI - Build & Test
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - run: mvn clean install
      - run: mvn test

  staging-deploy:
    name: Deploy to staging (develop)
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - run: mvn clean package -DskipTests
      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }}:staging .
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - run: docker push ${{ env.IMAGE_NAME }}:staging
      - name: SSH deploy to staging
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_SSH_PORT }}
          script: |
            docker pull ${{ env.IMAGE_NAME }}:staging
            docker stop search_engine || true
            docker rm search_engine || true
            docker run -d --name search_engine -p 8080:8080 ${{ env.IMAGE_NAME }}:staging

  production-deploy:
    name: Deploy to production (tag)
    runs-on: ubuntu-latest
    needs: ci
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - run: mvn clean package -DskipTests
      - name: Build image
        run: docker build -t ${{ env.IMAGE_NAME }}:latest .
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - run: docker push ${{ env.IMAGE_NAME }}:latest
      - name: SSH deploy
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_SSH_PORT }}
          script: |
            docker pull ${{ env.IMAGE_NAME }}:latest
            docker stop search_engine || true
            docker rm search_engine || true
            docker run -d --name search_engine -p 8080:8080 ${{ env.IMAGE_NAME }}:latest
